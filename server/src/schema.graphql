type Query {
  game(id: ID!): Game!
  games: [Game!]!
  user(id: ID, email: String, username: String): User!
  users: [User!]!
  review(id: ID!): Review!
  reviews: [Review!]!
  theme(id: ID!): Theme!
  themes: [Theme!]!
  platform(id: ID!): Platform!
  platforms: [Platform!]!
  genre(id: ID!): Genre!
  genres: [Genre!]!
  ratings: [Rating!]!
  rating(id: ID!): Rating!
}

type Mutation {
  signup(
    username: String!
    thumbnail: String! = "https://api.adorable.io/avatars/83/abott@adorable.png"
    first_name: String!
    last_name: String!
    email: String!
    password: String!
    user_role: Role! = USER
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload
  createGame(data: createGameInput): Game!
  createReview(review: String!, published: Boolean!, game: ID!): Review!
}

enum Role {
  ADMIN
  USER
}

# input CreateUserInput {
#   username: String!
#   first_name: String!
#   last_name: String!
#   email: String!
#   password: String!
#   user_role: [Role]
#   # created_at: String! # Use Date.toISOString()
# }

input createGameInput {
  title: String!
  release_year: Int!
  box_art: String!
  synopsis: String!
  description: String
  trailer: String!
  hero: String!
  developer: String!
  platform: String!
  rating: Int!
  genre: String!
  theme: String!
}

type AuthPayload {
  token: String
  user: User
}

type GameCollectionDetails {
  game: [Game!]!
  rank: Int!
  thumbnail: String! # Link to Game?
  created_at: String! # Use Date.toISOString() to represent DATETIME ????
  status: Boolean!
  owned: Boolean!
}

type Game {
  id: ID!
  title: String!
  release_year: Int
  box_art: String!
  synopsis: String!
  description: String!
  trailer: String
  hero: String
  developer: String
  reviews: [Review!]!
  rating: Rating!
  theme: [Theme!]!
  genre: [Genre!]!
  platform: [Platform!]!
}

type Genre {
  id: ID!
  genre: String!
  games: [Game!]!
}

type Platform {
  id: ID!
  platform: String!
  games: [Game!]!
}

type Rating {
  id: ID!
  rating: Int!
  games: [Game!]!
}

type Review {
  id: ID!
  review: String!
  created_at: String!
  # game: [Game!]!
  game: Game!
  author: User!
}

type SubCollection {
  id: ID!
  name: String!
  collection: [Game!]!
}

type Theme {
  id: ID!
  theme: String!
  games: [Game!]!
}

type User {
  id: ID!
  username: String!
  thumbnail: String!
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  reviews: [Review!]!
  created_at: String! # Use Date.toISOString()
  collection: [GameCollectionDetails!]!
  user_role: Role!
}
