type Query {
  game(id: ID!): Game!
  games: [Game!]!
  user: User!
  users: [User!]!
  review(id: ID!): Review!
  reviews: [Review!]!
  theme(id: ID!): Theme!
  themes: [Theme!]!
  platform(id: ID!): Platform!
  platforms: [Platform!]!
  genre(id: ID!): Genre!
  genres: [Genre!]!
  ratings: [Rating!]!
  rating(id: ID!): Rating!
}

type Mutation {
  createUser(data: CreateUserInput): User!
  createGame(title: String!, platform: String!, rating: Float): Game!
  createReview(
    review: String!
    published: Boolean!
    game: ID!
    user: ID!
  ): Review!
}

input CreateUserInput {
  name: String!
  first_name: String!
  last_name: String!
  email: String!
  password: String!
}

enum Role {
  ADMIN
  USER
}

type CollectionDetails {
  game: [Game!]!
  rank: Int!
  created_at: String! # Use Date.toISOString() to represent DATETIME ????
  status: Boolean!
  owned: Boolean!
}

type Game {
  id: ID!
  title: String!
  release_year: Int
  box_art: String!
  synopsis: String!
  description: String!
  trailer: String
  hero: String
  developer: String
  reviews: [Review!]!
  rating: Rating!
  theme: [Theme!]!
  genre: [Genre!]!
  platform: [Platform!]!
}

type Genre {
  id: ID!
  genre: String!
  games: [Game!]!
}

type Platform {
  id: ID!
  platform: String!
  games: [Game!]!
}

type Rating {
  id: ID!
  rating: Int!
  games: [Game!]!
}

type Review {
  id: ID!
  review: String!
  game: [Game!]!
  user: User!
}

type SubCollection {
  id: ID!
  name: String!
  collection: [Game!]!
}

type Theme {
  id: ID!
  theme: String!
  games: [Game!]!
}

type User {
  id: ID!
  username: String!
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  collection: [Game!]!
  reviews: [Review!]!
  created_at: String! # Use Date.toISOString()
  role: Role!
}
